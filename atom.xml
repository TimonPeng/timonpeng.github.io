<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Timon&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://timonpeng.com/"/>
  <updated>2020-03-11T10:33:55.102Z</updated>
  <id>https://timonpeng.com/</id>
  
  <author>
    <name>Timon Peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tips of pyinstaller executable file decompilation</title>
    <link href="https://timonpeng.com/tips-of-pyinstaller-executable-file-decompilation/"/>
    <id>https://timonpeng.com/tips-of-pyinstaller-executable-file-decompilation/</id>
    <published>2020-03-11T07:00:00.000Z</published>
    <updated>2020-03-11T10:33:55.102Z</updated>
    
    <content type="html"><![CDATA[<p>The articles on the Internet are all relatively old.</p><p>Tips should be noted:</p><ol><li>Python2.x and Python3.x have different length magic number.</li><li>fix main program file use <code>struct file</code> contents, not fixed magic number.</li></ol><h1 id="Extract-pyc-file"><a href="#Extract-pyc-file" class="headerlink" title="Extract pyc file"></a>Extract pyc file</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># download</span><br><span class="line">git clone https://github.com/pyinstaller/pyinstaller.git</span><br><span class="line">cd pyinstaller/</span><br><span class="line"></span><br><span class="line"># unnecessary</span><br><span class="line">pyenv local 3.6.9</span><br><span class="line">virtualenv venv</span><br><span class="line">source ./venv/bin/activate</span><br><span class="line"></span><br><span class="line"># install</span><br><span class="line">python setup.py develop</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python PyInstaller/utils/cliutils/archive_viewer.py /path/your-executable-file</span><br></pre></td></tr></table></figure><p>There are 4 commands available:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">U: go Up one level</span><br><span class="line">O &lt;name&gt;: open embedded archive name</span><br><span class="line">X &lt;name&gt;: extract name</span><br><span class="line">Q: quit</span><br></pre></td></tr></table></figure><p>Extract <code>main program file</code> and <code>struct file</code>.</p><h1 id="Fix-main-file-header"><a href="#Fix-main-file-header" class="headerlink" title="Fix main file header"></a>Fix main file header</h1><p>You can see the Python version through <code>struct file</code> also:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ xxd &lt; struct.py</span><br><span class="line"></span><br><span class="line">00000000: 160d 0d0a 7079 6930 0101 0000 e300 0000  ....pyi0........</span><br><span class="line">00000010: 0000 0000 0000 0000 0008 0000 0040 0000  .............@..</span><br><span class="line">00000020: 0073 4c00 0000 6400 0064 0100 6402 0064  .sL...d..d..d..d</span><br><span class="line">00000030: 0300 6404 0064 0500 6406 0064 0700 6708  ..d..d..d..d..g.</span><br><span class="line">00000040: 005a 0000 6408 0064 0900 6c01 0054 6408  .Z..d..d..l..Td.</span><br><span class="line">00000050: 0064 0a00 6c01 006d 0200 5a02 0001 6408  .d..l..m..Z...d.</span><br><span class="line">00000060: 0064 0b00 6c01 006d 0300 5a03 0001 640c  .d..l..m..Z...d.</span><br><span class="line">00000070: 0053 290d da08 6361 6c63 7369 7a65 da04  .S)...calcsize..</span><br><span class="line">00000080: 7061 636b da09 7061 636b 5f69 6e74 6fda  pack..pack_into.</span><br><span class="line">00000090: 0675 6e70 6163 6bda 0b75 6e70 6163 6b5f  .unpack..unpack_</span><br><span class="line">000000a0: 6672 6f6d da0b 6974 6572 5f75 6e70 6163  from..iter_unpac</span><br><span class="line">000000b0: 6bda 0653 7472 7563 74da 0565 7272 6f72  k..Struct..error</span><br><span class="line">000000c0: e900 0000 0029 01da 012a 2901 da0b 5f63  .....)...*)..._c</span><br><span class="line">000000d0: 6c65 6172 6361 6368 6529 01da 075f 5f64  learcache)...__d</span><br><span class="line">000000e0: 6f63 5f5f 4e29 04da 075f 5f61 6c6c 5f5f  oc__N)...__all__</span><br><span class="line">000000f0: da07 5f73 7472 7563 7472 0b00 0000 720c  .._structr....r.</span><br><span class="line">00000100: 0000 00a9 0072 0f00 0000 720f 0000 00fa  .....r....r.....</span><br><span class="line">00000110: 1c2f 7573 722f 6c69 622f 7079 7468 6f6e  ./usr/lib/python</span><br><span class="line">00000120: 332e 352f 7374 7275 6374 2e70 79da 083c  3.5/struct.py..&lt;</span><br><span class="line">00000130: 6d6f 6475 6c65 3e03 0000 0073 0c00 0000  module&gt;....s....</span><br><span class="line">00000140: 0f01 0303 0303 0903 0a01 1001            ............</span><br></pre></td></tr></table></figure><p>View main program file head:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ xxd &lt; t.py | more</span><br><span class="line"></span><br><span class="line">00000000: e300 0000 0000 0000 0000 0000 0009 0000  ................</span><br><span class="line">00000010: 0040 0000 0073 6502 0000 6400 0064 0100  .@...se...d..d..</span><br><span class="line">00000020: 6c00 006d 0100 5a01 0001 6400 0064 0200  l..m..Z...d..d..</span><br><span class="line">00000030: 6c02 005a 0200 6400 0064 0200 6c03 005a  l..Z..d..d..l..Z</span><br></pre></td></tr></table></figure><p>You can find that the first byte of the main program is <code>e3</code>, therefore, the contents before <code>e3</code> in the <code>struct file</code> are filled to the front of the main program file.</p><p><strong>It is 12 bytes(160d 0d0a 7079 6930 0101 0000) in the example, not 8 bytes on many old articles. So donâ€™t use fixed length!!! View your struct file header!!!</strong></p><h1 id="Uncompyle-pyc-file"><a href="#Uncompyle-pyc-file" class="headerlink" title="Uncompyle pyc file"></a>Uncompyle pyc file</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install uncompyle6</span><br><span class="line">uncompyle6 main.pyc &gt; main.py</span><br></pre></td></tr></table></figure><p>Well done!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The articles on the Internet are all relatively old.&lt;/p&gt;
&lt;p&gt;Tips should be noted:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python2.x and Python3.x have different len
      
    
    </summary>
    
    
      <category term="Reverse engineering" scheme="https://timonpeng.com/tags/Reverse-engineering/"/>
    
      <category term="Python" scheme="https://timonpeng.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>DJI RoboMaster S1 analyses</title>
    <link href="https://timonpeng.com/dji-robomaster-s1-analyses/"/>
    <id>https://timonpeng.com/dji-robomaster-s1-analyses/</id>
    <published>2019-09-08T07:00:00.000Z</published>
    <updated>2019-09-09T01:41:51.008Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h1><h2 id="TCP-Ports"><a href="#TCP-Ports" class="headerlink" title="TCP Ports"></a>TCP Ports</h2><ul><li>21 Anonymous login FTP</li><li>8905 Unknown</li><li>8906 Unknown</li><li>8907 Unknown</li><li>8910 Unknown</li><li>8909 Unknown</li><li>8912 Unknown</li><li>8913 Unknown</li><li>8916 States logger</li></ul><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>Some .DAT files in the directorys.</p><img src="/dji-robomaster-s1-analyses/ftp-dirs.png" title="FTP"><h3 id="TCP-8916"><a href="#TCP-8916" class="headerlink" title="TCP/8916"></a>TCP/8916</h3><img src="/dji-robomaster-s1-analyses/8916.png" title="States"><h2 id="UDP-Ports"><a href="#UDP-Ports" class="headerlink" title="UDP Ports"></a>UDP Ports</h2><ul><li>10607 Heartbeat?</li></ul><h3 id="UDP-10607"><a href="#UDP-10607" class="headerlink" title="UDP/10607"></a>UDP/10607</h3><p>request</p><p><code>308088630000005b401c64006400c005140000640064006400c005140000640014006400c00514000064000101040102</code></p><p>response</p><p><code>09801624000000bb01</code></p><h1 id="Firmware"><a href="#Firmware" class="headerlink" title="Firmware"></a>Firmware</h1><h2 id="Version-File"><a href="#Version-File" class="headerlink" title="Version File"></a>Version File</h2><p>xw607_0000_v00.05.0028_20190726.pro.cfg.sig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;dji&gt;</span><br><span class="line">    &lt;device id=&quot;xw607&quot;&gt;</span><br><span class="line">        &lt;firmware formal=&quot;00.05.0028&quot;&gt;</span><br><span class="line">            &lt;release version=&quot;00.05.0028&quot; antirollback=&quot;0&quot; antirollback_ext=&quot;cn:0&quot; enforce=&quot;0&quot; enforce_ext=&quot;cn:0&quot; enforce_time=&quot;2019-07-26T04:02:40+00:00&quot; from=&quot;2019/07/26&quot; expire=&quot;2020/07/26&quot;&gt;</span><br><span class="line">                &lt;module id=&quot;0801&quot; version=&quot;00.11.06.02&quot; type=&quot;&quot; group=&quot;&quot; size=&quot;118774688&quot; md5=&quot;69fc57d22e4e45da705511eb120239ac&quot;&gt;xw607_0801_v00.11.06.02_20190726.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;0805&quot; version=&quot;01.01.01.90&quot; type=&quot;&quot; group=&quot;&quot; size=&quot;2785760&quot; md5=&quot;4ddd99570a2be009614f01e3ddf7edb2&quot;&gt;xw607_0805_v01.01.01.90_20190624.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;1100&quot; version=&quot;03.74.05.07&quot; type=&quot;&quot; group=&quot;&quot; size=&quot;89984&quot; md5=&quot;f5ce50d2ccdf61f1acd84c3048be514c&quot;&gt;xw607_1100_v03.74.05.07_20181024.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;0902&quot; version=&quot;00.18.11.29&quot; type=&quot;&quot; group=&quot;&quot; size=&quot;16256&quot; md5=&quot;dcba41f344a82ebf145f8cd278d02b67&quot;&gt;xw607_0902_v00.18.11.29_20181129.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;0306&quot; version=&quot;01.03.22.03&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;480288&quot; md5=&quot;7d7bc2941a6e045c8e18b518d155942e&quot;&gt;xw607_0306_v01.03.22.03_20190724_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;1200&quot; version=&quot;01.02.01.12&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;31264&quot; md5=&quot;13d734493c59105109c723fcaa27582e&quot;&gt;xw607_1200_v01.02.01.12_20190512_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;1201&quot; version=&quot;01.02.01.12&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;31264&quot; md5=&quot;e27f0bd66db04d11ee4c5a7e5e53545d&quot;&gt;xw607_1201_v01.02.01.12_20190512_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;1202&quot; version=&quot;01.02.01.12&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;31264&quot; md5=&quot;ced740fbbb352ef137a92438ce444e63&quot;&gt;xw607_1202_v01.02.01.12_20190512_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;1203&quot; version=&quot;01.02.01.12&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;31264&quot; md5=&quot;e77f5d4481fa8719fa1309290996ef54&quot;&gt;xw607_1203_v01.02.01.12_20190512_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;2401&quot; version=&quot;00.05.11.00&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;20000&quot; md5=&quot;4160895a80b82142c5f676e8263526d0&quot;&gt;xw607_2401_v00.05.11.00_20190505_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;2402&quot; version=&quot;00.05.11.00&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;20000&quot; md5=&quot;a51c35e9ff686adcbc563da6968ce35a&quot;&gt;xw607_2402_v00.05.11.00_20190505_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;2403&quot; version=&quot;00.05.11.00&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;20000&quot; md5=&quot;fc85ff20ff4a6575288cf0c1a146d5f3&quot;&gt;xw607_2403_v00.05.11.00_20190505_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;2404&quot; version=&quot;00.05.11.00&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;20000&quot; md5=&quot;8219e9b49503002d88a81815d1f2a706&quot;&gt;xw607_2404_v00.05.11.00_20190505_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;2405&quot; version=&quot;00.05.11.00&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;20000&quot; md5=&quot;aea323ef23b3abd30f95a6fab33e653a&quot;&gt;xw607_2405_v00.05.11.00_20190505_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;2406&quot; version=&quot;00.05.11.00&quot; type=&quot;hw02&quot; group=&quot;&quot; size=&quot;20000&quot; md5=&quot;d3853f1d02cb327a52d524b297c5b208&quot;&gt;xw607_2406_v00.05.11.00_20190505_hw02.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;2300&quot; version=&quot;00.01.04.44&quot; type=&quot;hw03&quot; group=&quot;&quot; size=&quot;21024&quot; md5=&quot;22a9d5c54de7fc30d502fd96358408dd&quot;&gt;xw607_2300_v00.01.04.44_20190712_hw03.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;0401&quot; version=&quot;17.33.00.24&quot; type=&quot;hw01&quot; group=&quot;&quot; size=&quot;30752&quot; md5=&quot;9a01df66a01883e8f0200b37e8c03412&quot;&gt;xw607_0401_v17.33.00.24_20190104_hw01.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;0400&quot; version=&quot;00.02.12.66&quot; type=&quot;&quot; group=&quot;&quot; size=&quot;378912&quot; md5=&quot;4592ad30d086187c9915f5aa42b9a6c1&quot;&gt;xw607_0400_v00.02.12.66_20190716.pro.fw.sig&lt;/module&gt;</span><br><span class="line">                &lt;module id=&quot;0600&quot; version=&quot;00.19.03.19&quot; type=&quot;&quot; group=&quot;rc&quot; size=&quot;76832&quot; md5=&quot;a0c199d147e4af928bc367c518698471&quot;&gt;xw607_0600_v00.19.03.19_20190319.pro.fw.sig&lt;/module&gt;</span><br><span class="line">            &lt;/release&gt;</span><br><span class="line">        &lt;/firmware&gt;</span><br><span class="line">    &lt;/device&gt;</span><br><span class="line">&lt;/dji&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;Network&quot;&gt;&lt;a href=&quot;#Network&quot; class=&quot;headerlink&quot; title=&quot;Network&quot;&gt;&lt;/a&gt;Network&lt;/h1&gt;&lt;h2 id=&quot;TCP-Ports&quot;&gt;&lt;a href=&quot;#TCP-P
      
    
    </summary>
    
    
      <category term="Hardware" scheme="https://timonpeng.com/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>Reverse engineering GL iNet MiFi router</title>
    <link href="https://timonpeng.com/reverse-engineering-gl-inet-mifi-router/"/>
    <id>https://timonpeng.com/reverse-engineering-gl-inet-mifi-router/</id>
    <published>2019-07-25T07:00:00.000Z</published>
    <updated>2019-07-28T11:07:23.993Z</updated>
    
    <content type="html"><![CDATA[<p>A few days ago, my friend from Beijing sent me a <a href="https://www.gl-inet.com/products/gl-mifi/" target="_blank" rel="noopener">GL-MiFi 4G router</a>. It uses custom developed firmware(based on OpenWrt, of course) to implement some functions. So we want to view its code and how it implements some functions.</p><a id="more"></a><h1 id="Scan-ports"><a href="#Scan-ports" class="headerlink" title="Scan ports"></a>Scan ports</h1><p>I used nmap to scan its ports and found that 53, 80 and some custom service ports(I confirmed that they are some http services) were opened.</p><h1 id="Web-interface"><a href="#Web-interface" class="headerlink" title="Web interface"></a>Web interface</h1><p>SSH and telnet have not been opened, so I decided to check the web interface.</p><p>However, only some basic state and networking setting operation pages here.</p><h1 id="Sniffing-upgrade-host-url"><a href="#Sniffing-upgrade-host-url" class="headerlink" title="Sniffing upgrade host url"></a>Sniffing upgrade host url</h1><p>At that time, the online upgrade function caught my attention. So I decided to sniffing the upgrade url to get the firmware file.</p><p>I connected GL-MiFi to another RT-AC86U router: <code>Internet &lt;-&gt; RT-AC86U &lt;-&gt; GL-MiFi</code> and run <code>tcpdump</code> on RT-AC86U, then use Wireshark, I got the upgrade host ip.</p><p>Then I forwarded all the original traffic to my ip on RT-AC86U.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A PREROUTING -p tcp -m tcp -j DNAT -d ORIGINAL-IP --match multiport --dports 80,443 --to-destination MY-IP nat</span><br></pre></td></tr></table></figure><p>I can see the request urls now. So I wrote a small Flask app to handle all url and response fake data of upgrade request.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">version=10.0</span><br><span class="line">date=2019-7-25</span><br><span class="line">filename=upgrade_10.0.bin</span><br><span class="line">md5=xxxxxx</span><br></pre></td></tr></table></figure><p>Now I have the url path of the firmware files and downloaded them.</p><h1 id="View-firmware"><a href="#View-firmware" class="headerlink" title="View firmware"></a>View firmware</h1><p>I used <code>binwalk upgrade.bin | head</code> to check firmware file but got nothing.</p><p>Then I converted it into HEX string <code>xxd &lt; upgrade.bin | more</code>, after viewing, I think it is an encrypted file.</p><p>Usually unencrypted firmware files have some features:</p><ol><li>The first 64 bytes of the file header is <code>2705 1956</code>, a U-Boot header</li><li>An operating system string after the U-Boot image header</li><li>Part of the blank blocks(0xFF) is at the end</li></ol><p>You can view the U-Boot image header code on <a href="https://github.com/u-boot/u-boot/blob/master/include/image.h#L319" target="_blank" rel="noopener">GitHub</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct image_header &#123;</span><br><span class="line">        uint32_t        ih_magic;       /* Image Header Magic Number    */</span><br><span class="line">        uint32_t        ih_hcrc;        /* Image Header CRC Checksum    */</span><br><span class="line">        uint32_t        ih_time;        /* Image Creation Timestamp     */</span><br><span class="line">        uint32_t        ih_size;        /* Image Data Size              */</span><br><span class="line">        uint32_t        ih_load;        /* Data  Load  Address          */</span><br><span class="line">        uint32_t        ih_ep;          /* Entry Point Address          */</span><br><span class="line">        uint32_t        ih_dcrc;        /* Image Data CRC Checksum      */</span><br><span class="line">        uint8_t         ih_os;          /* Operating System             */</span><br><span class="line">        uint8_t         ih_arch;        /* CPU architecture             */</span><br><span class="line">        uint8_t         ih_type;        /* Image Type                   */</span><br><span class="line">        uint8_t         ih_comp;        /* Compression Type             */</span><br><span class="line">        uint8_t         ih_name[IH_NMLEN];      /* Image Name           */</span><br><span class="line">&#125; image_header_t;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ xxd &lt; upgrade_decrypto.bin | more</span><br><span class="line">00000000: 2705 1956|d2fc 9955|5b20 b51a|0012 c3a7|   &apos;..V...U[ ......</span><br><span class="line">00000010: 8006 0000|8006 0000|d695 0fbf|05|05|02|03| ................</span><br><span class="line">00000020: 4d49 5053 204f 7065 6e57 7274 204c 696e    MIPS OpenWrt Lin</span><br><span class="line">00000030: 7578 2d33 2e31 382e 3233 0000 0000 0000    ux-3.18.23......</span><br></pre></td></tr></table></figure><p>At the same time, I found an <a href="https://www.right.com.cn/forum/thread-147608-1-1.html" target="_blank" rel="noopener">article</a> about firmware encryption, so I think the decryption function maybe inside firmware.</p><p>Now I am in trouble.</p><h1 id="Hardware-debug"><a href="#Hardware-debug" class="headerlink" title="Hardware debug"></a>Hardware debug</h1><p>I decided to tear down it and start with the hardware.</p><p>Connect to UART port via USB TTL adapter.</p><table><thead><tr><th>Adapter</th><th>Router</th></tr></thead><tbody><tr><td>GND</td><td>GND</td></tr><tr><td>TXD</td><td>RXD</td></tr><tr><td>RXD</td><td>TXD</td></tr></tbody></table><p>According the <a href="https://docs.gl-inet.com/en/3/dev/serial/" target="_blank" rel="noopener">doc</a> set speed <code>115200</code>.</p><h2 id="Run-U-Boot-mode"><a href="#Run-U-Boot-mode" class="headerlink" title="Run U-Boot mode"></a>Run U-Boot mode</h2><ol><li>Press and hold the reset button</li><li>Power on the unit (keep holding down the reset button)</li><li>The 3G/4G led will flash</li><li>Press reset button for at least:<ul><li>5 sec. to run web failsafe mode</li><li>8 sec. to run U-Boot console</li><li>10 sec. to run U-Boot netconsole</li></ul></li><li>Release the reset button</li><li>The 3G/4G led will faintly flash twice</li><li>Then you are in U-Boot mode</li></ol><img src="/reverse-engineering-gl-inet-mifi-router/uboot.gif" title="U-Boot"><p>Now you can read the data in memory.</p><h2 id="Busybox"><a href="#Busybox" class="headerlink" title="Busybox"></a>Busybox</h2><p>Or we can try to use shell in normal mode.</p><img src="/reverse-engineering-gl-inet-mifi-router/busybox.png" title="BusyBox"><h1 id="Decrypt-firmware"><a href="#Decrypt-firmware" class="headerlink" title="Decrypt firmware"></a>Decrypt firmware</h1><p>After viewing at the Lua web files, I found the shell script for the call.</p><p>Now I can get decrypt firmware file and duplicate it in a new router of the same model!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A few days ago, my friend from Beijing sent me a &lt;a href=&quot;https://www.gl-inet.com/products/gl-mifi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GL-MiFi 4G router&lt;/a&gt;. It uses custom developed firmware(based on OpenWrt, of course) to implement some functions. So we want to view its code and how it implements some functions.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hardware" scheme="https://timonpeng.com/tags/Hardware/"/>
    
      <category term="Reverse engineering" scheme="https://timonpeng.com/tags/Reverse-engineering/"/>
    
      <category term="Router" scheme="https://timonpeng.com/tags/Router/"/>
    
  </entry>
  
  <entry>
    <title>Mosec 2019 badge crack</title>
    <link href="https://timonpeng.com/mosec-2019-badge-crack/"/>
    <id>https://timonpeng.com/mosec-2019-badge-crack/</id>
    <published>2019-05-30T07:00:00.000Z</published>
    <updated>2019-07-28T07:28:24.664Z</updated>
    
    <content type="html"><![CDATA[<p>Turn on the power, convert the handset light to morse code, decode it is <code>M0S8C74</code>.</p><a id="more"></a><p>Connect serial port through usb and send code(end with <code>#</code>) to unlock.</p><img src="/mosec-2019-badge-crack/crack.jpg" title="Crack">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Turn on the power, convert the handset light to morse code, decode it is &lt;code&gt;M0S8C74&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hardware" scheme="https://timonpeng.com/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>Xiaofang 1s camera downgrade firmware version</title>
    <link href="https://timonpeng.com/xiaofang-1s-camera-downgrade-firmware-version/"/>
    <id>https://timonpeng.com/xiaofang-1s-camera-downgrade-firmware-version/</id>
    <published>2019-01-13T07:00:00.000Z</published>
    <updated>2019-07-29T02:00:09.793Z</updated>
    
    <content type="html"><![CDATA[<p>Download files with firmware version of <code>5.6.2.45</code> <a href="https://mega.nz/#F!pZcwHYCL!hAlLYOlAUHi9007RDQ6lLw" target="_blank" rel="noopener">here</a>.</p><a id="more"></a><ol><li>Rename the firmware file to <code>demo.bin</code></li><li>Copy the firmware file to TF cardâ€™s root directory</li><li>Turn off Xiaofangâ€™s power</li><li>Insert the TF card into Xiaofang 1s</li><li>Use pin press and hold the reset button(on the right side of the usb port)</li><li>Power on the unit (keep holding down the reset button)</li><li>After waiting for 15 seconds, release the reset button</li><li>Wait for 5 minutes, if it does not restart automatically, restart from step 3</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Download files with firmware version of &lt;code&gt;5.6.2.45&lt;/code&gt; &lt;a href=&quot;https://mega.nz/#F!pZcwHYCL!hAlLYOlAUHi9007RDQ6lLw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hardware" scheme="https://timonpeng.com/tags/Hardware/"/>
    
      <category term="Camera" scheme="https://timonpeng.com/tags/Camera/"/>
    
  </entry>
  
  <entry>
    <title>Shanghai telecom home users replace SDN gateway</title>
    <link href="https://timonpeng.com/shanghai-telecom-home-users-replace-sdn-gateway/"/>
    <id>https://timonpeng.com/shanghai-telecom-home-users-replace-sdn-gateway/</id>
    <published>2018-10-01T07:00:00.000Z</published>
    <updated>2019-07-28T13:22:36.006Z</updated>
    
    <content type="html"><![CDATA[<p>Replaced HG2821T-U with ZTE F401.</p><p>ZTE F401 is the equipment of Shanghai Telecom enterprise users, we can also use it.</p><a id="more"></a><h1 id="Get-LOID-from-HG2821T-U"><a href="#Get-LOID-from-HG2821T-U" class="headerlink" title="Get LOID from HG2821T-U"></a>Get LOID from HG2821T-U</h1><p>Connect to HG2821T-U and request <code>http://192.168.1.1/appapi/getstat/000000</code>, you can get loid from response json data.</p><img src="/shanghai-telecom-home-users-replace-sdn-gateway/get-loid.png" title="Get LOID"><h1 id="Configure-ZTE-F401"><a href="#Configure-ZTE-F401" class="headerlink" title="Configure ZTE F401"></a>Configure ZTE F401</h1><p>Connect to ZTE F401 and configure network manually:</p><ul><li>IPv4 Address: 192.168.1.2</li><li>Subnet Mask: 255.255.255.0</li><li>Router: 192.168.1.1</li></ul><p>Login web anagement interface <code>http://192.168.1.1</code>, username and password both <code>admin</code>.</p><p>Then configure SN, LOID and password as HG2821T-Uâ€™s LOID.</p><img src="/shanghai-telecom-home-users-replace-sdn-gateway/set-onu.png" title="Set ONU"><img src="/shanghai-telecom-home-users-replace-sdn-gateway/set-ctc.png" title="Set CTC"><p>If some random codes in the input box, donâ€™t delete and keep them at the end.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Replaced HG2821T-U with ZTE F401.&lt;/p&gt;
&lt;p&gt;ZTE F401 is the equipment of Shanghai Telecom enterprise users, we can also use it.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hardware" scheme="https://timonpeng.com/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>Display custom image for the rimowa electronic tag</title>
    <link href="https://timonpeng.com/display-custom-image-for-the-rimowa-electronic-tag/"/>
    <id>https://timonpeng.com/display-custom-image-for-the-rimowa-electronic-tag/</id>
    <published>2018-03-28T07:00:00.000Z</published>
    <updated>2019-09-07T17:37:54.508Z</updated>
    
    <content type="html"><![CDATA[<p>Rimowaâ€™s electronic tag allows you to display your boarding pass (some airlines) or customized picture information on your luggage. It has some input restrictions, but we can show anything now!</p><a id="more"></a><h1 id="Reverse-engineering"><a href="#Reverse-engineering" class="headerlink" title="Reverse engineering"></a>Reverse engineering</h1><h2 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h2><ul><li>A picture(200*450), if it is colored, it will be automatically displayed in black and white</li><li>Android phone(installed APP)</li><li>Traffic proxy tool(Charles, mitmproxy, etc.)</li><li>Your luggage</li></ul><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rimowaâ€™s electronic tag allows you to display your boarding pass (some airlines) or customized picture information on your luggage. It has some input restrictions, but we can show anything now!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hardware" scheme="https://timonpeng.com/tags/Hardware/"/>
    
      <category term="Reverse engineering" scheme="https://timonpeng.com/tags/Reverse-engineering/"/>
    
  </entry>
  
</feed>
